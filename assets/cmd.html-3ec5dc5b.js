import{_ as i,a8 as l,p as o,q as s,Z as d,a1 as a,R as e,t as c}from"./framework-1bc831b6.js";const n={},r=a(`<h1 id="命令接口与命令模板" tabindex="-1"><a class="header-anchor" href="#命令接口与命令模板" aria-hidden="true">#</a> 命令接口与命令模板</h1><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>在查看此部分内容前，你应当已经阅读文档中的“进阶”部分</p></div><h2 id="命令接口" tabindex="-1"><a class="header-anchor" href="#命令接口" aria-hidden="true">#</a> 命令接口</h2><p>需要先导入其实例对象：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> utils<span class="token punctuation">.</span>cmdInterface <span class="token keyword">import</span> ExeI
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="exei-role" tabindex="-1"><a class="header-anchor" href="#exei-role" aria-hidden="true">#</a> <strong>ExeI.role</strong></h3><p>类角色常量</p><p>其下含有以下几个值，分别代表几种权限等级（值类型为 int）：</p><p><code>ExeI.role.SYS</code>, <code> ExeI.role.OWNER</code>, <code>ExeI.role.SU</code>, <code>ExeI.role.WHITE</code>, <code>ExeI.role.USER</code></p><h3 id="exei-logger" tabindex="-1"><a class="header-anchor" href="#exei-logger" aria-hidden="true">#</a> <strong>ExeI.logger</strong></h3><p>全局日志器</p><p>其下可用方法有： <code>info()</code>, <code>debug()</code>, <code>warning()</code>, <code>error()</code>, <code>critical()</code></p><h3 id="exei-sync-method" tabindex="-1"><a class="header-anchor" href="#exei-sync-method" aria-hidden="true">#</a> <strong>ExeI.sync_method()</strong></h3><p>同步命令方法装饰器</p>`,14),h={class:"code-space"},_=e("p",{class:"code-header"},[e("code",{class:"Python code"},"def sync_method(self, alias: list=None, userLevel: ExeI.role=au.USER, lock: bool=False, prefix: bool=False, comment: str='', paramsTip: str='无说明')")],-1),p=[_],m=a('<ul><li><strong>alias</strong>：命令方法的别称，字符串列表（命令也可以通过别称触发）</li><li><strong>userLevel</strong>：可以调用命令的用户等级，<code>ExeI.role</code> 类常量，可取值如下：<code>ExeI.role.SYS</code>, <code>ExeI.role.OWNER</code>, <code>ExeI.role.SU</code>, <code>ExeI.role.WHITE</code>, <code>ExeI.role.USER</code></li><li><strong>lock</strong>：是否加线程锁 <code>threading.Lock()</code></li><li><strong>prefix</strong>：是否启用前缀模式，启用前缀将会在返回的行为对象最前面附着命令和参数信息</li><li><strong>comment</strong>：指定命令方法的注释（其他命令调用该命令时可以使用）</li><li><strong>paramsTip</strong>：指定命令方法的参数提醒语句（其他命令调用该命令时可以使用）</li></ul><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>注意，装饰器所有参数都使用默认参数时，应该写作 <code>@ExeI.sync_method()</code></p></div><h3 id="exei-async-method" tabindex="-1"><a class="header-anchor" href="#exei-async-method" aria-hidden="true">#</a> <strong>ExeI.async_method()</strong></h3><p>异步命令方法装饰器</p>',4),g={class:"code-space"},u=e("p",{class:"code-header"},[e("code",{class:"Python code"},"def async_method(self, alias: list=None, userLevel: ExeI.role=au.USER, lock: bool=False, prefix: bool=False, comment: str='', paramsTip: str='无说明')")],-1),x=[u],E=a('<ul><li><strong>alias</strong>：命令方法的别称，字符串列表（命令也可以通过别称触发）</li><li><strong>userLevel</strong>：可以调用命令的用户等级，<code>ExeI.role</code> 类常量，可取值如下：<code>ExeI.role.SYS</code>, <code>ExeI.role.OWNER</code>, <code>ExeI.role.SU</code>, <code>ExeI.role.WHITE</code>, <code>ExeI.role.USER</code></li><li><strong>lock</strong>：是否加协程锁 <code>asyncio.Lock()</code></li><li><strong>prefix</strong>：是否启用前缀模式，启用前缀将会在返回的行为对象最前面附着命令和参数信息</li><li><strong>comment</strong>：指定命令方法的注释。（其他命令调用该命令时可以使用）</li><li><strong>paramsTip</strong>：指定命令方法的参数提醒语句。（其他命令调用该命令时可以使用）</li></ul><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>注意，装饰器所有参数都使用默认参数时，应该写作 <code>@ExeI.async_method()</code></p></div><h3 id="exei-call" tabindex="-1"><a class="header-anchor" href="#exei-call" aria-hidden="true">#</a> <strong>ExeI.call()</strong></h3><p>命令方法中调用其他命令</p>',4),I={class:"code-space"},f=e("p",{class:"code-header"},[e("code",{class:"Python code"},"async def call(self, cmdName: str, event: dict, *args, **kwargs) -> dict")],-1),v=[f],y=a('<ul><li><strong>cmdName</strong>：要调用的命令的名称</li><li><strong>event</strong>：事件对象</li><li><strong>args / kwargs</strong>：被调用命令的参数</li><li>return：行为对象</li></ul><h3 id="exei-get-cmd-alias" tabindex="-1"><a class="header-anchor" href="#exei-get-cmd-alias" aria-hidden="true">#</a> <strong>ExeI.get_cmd_alias()</strong></h3><p>获取其他命令的别称</p>',3),N={class:"code-space"},b=e("p",{class:"code-header"},[e("code",{class:"Python code"},"def get_cmd_alias(self, cmdName: str) -> list")],-1),k=[b],S=e("ul",null,[e("li",null,[e("strong",null,"cmdName"),c("：要调用的命令的名称")]),e("li",null,"return：别称 list")],-1),T=e("h3",{id:"exei-get-cmd-auth",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exei-get-cmd-auth","aria-hidden":"true"},"#"),c(),e("strong",null,"ExeI.get_cmd_auth()")],-1),R=e("p",null,"获取其他命令的权限限制值",-1),P={class:"code-space"},w=e("p",{class:"code-header"},[e("code",{class:"Python code"},"def get_cmd_auth(self, cmdName: str) -> ExeI.role")],-1),U=[w],W=e("ul",null,[e("li",null,[e("strong",null,"cmdName"),c("：要调用的命令的名称")]),e("li",null,[c("return："),e("code",null,"ExeI.role"),c(" 类常量")])],-1),L=e("h3",{id:"exei-get-cmd-comment",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exei-get-cmd-comment","aria-hidden":"true"},"#"),c(),e("strong",null,"ExeI.get_cmd_comment()")],-1),F=e("p",null,"获取其他命令的注释",-1),B={class:"code-space"},H=e("p",{class:"code-header"},[e("code",{class:"Python code"},"def get_cmd_comment(self, cmdName: str) -> str")],-1),O=[H],V=e("ul",null,[e("li",null,[e("strong",null,"cmdName"),c("：要调用的命令的名称")]),e("li",null,"return：注释字符串（即命令方法装饰器中 comment 的值）")],-1),Y=e("h3",{id:"exei-get-cmd-paramstip",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exei-get-cmd-paramstip","aria-hidden":"true"},"#"),c(),e("strong",null,"ExeI.get_cmd_paramsTip()")],-1),A=e("p",null,"获取其他命令的参数说明",-1),D={class:"code-space"},G=e("p",{class:"code-header"},[e("code",{class:"Python code"},"def get_cmd_paramsTip(self, cmdName: str) -> str")],-1),q=[G],Z=a('<ul><li><strong>cmdName</strong>：要调用的命令的名称</li><li>return：参数说明字符串（即命令方法装饰器中 paramsTip 的值）</li></ul><h2 id="命令模板" tabindex="-1"><a class="header-anchor" href="#命令模板" aria-hidden="true">#</a> 命令模板</h2><p>命令模板应该在项目根目录 <code>./templates</code> 内定义。定义时有以下要求：</p><ul><li>一个命令方法/命令模板对应一个 <code>.py</code> 文件，不能在 <code>templates</code> 文件夹内为一个命令方法定义多个文件</li><li>文件内必须存在与文件同名的方法，是命令的入口方法，必须被命令接口装饰器装饰</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>可以在一个文件内，可以把命令方法的步骤拆作多个子函数（子过程）</p></div>',5);function j(z,C){const t=l("highlight");return o(),s("div",null,[r,d((o(),s("div",h,p)),[[t]]),m,d((o(),s("div",g,x)),[[t]]),E,d((o(),s("div",I,v)),[[t]]),y,d((o(),s("div",N,k)),[[t]]),S,T,R,d((o(),s("div",P,U)),[[t]]),W,L,F,d((o(),s("div",B,O)),[[t]]),V,Y,A,d((o(),s("div",D,q)),[[t]]),Z])}const K=i(n,[["render",j],["__file","cmd.html.vue"]]);export{K as default};
