import{_ as c,a8 as a,p as s,q as t,Z as n,R as e,t as i,a1 as r}from"./framework-1bc831b6.js";const l={},h=r(`<h1 id="行为接口" tabindex="-1"><a class="header-anchor" href="#行为接口" aria-hidden="true">#</a> 行为接口</h1><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>在查看此部分内容前，你应当已经阅读文档中的“进阶”部分</p></div><h2 id="builder" tabindex="-1"><a class="header-anchor" href="#builder" aria-hidden="true">#</a> Builder</h2><p>先导入其实例对象：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> utils<span class="token punctuation">.</span>cmdInterface <span class="token keyword">import</span> Builder
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="builder-build" tabindex="-1"><a class="header-anchor" href="#builder-build" aria-hidden="true">#</a> <strong>Builder.build()</strong></h3><p>行为对象构造器构造方法</p>`,7),p={class:"code-space"},g=e("p",{class:"code-header"},[e("code",{class:"Python code"},"def build(self, package: dict, isEcho=False) -> dict")],-1),u=[g],_=r(`<ul><li><strong>package</strong>：packer 返回的 package</li><li><strong>isEcho</strong>：用于指定该 action 响应后， go-cqhttp 是否在响应事件附加上唯一标识符 echo，以用于区分响应事件。此处 isEcho 若为真，会自动使用纳秒时间戳作为唯一标识符</li><li>return：行为对象</li></ul><h2 id="packer" tabindex="-1"><a class="header-anchor" href="#packer" aria-hidden="true">#</a> Packer</h2><p>目前在 MeloBot 中，实现了两种主要的 Packer：</p><ul><li>msg_send_packer</li><li>msg_del_packer</li></ul><p>导入使用即可：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> cmdInterface <span class="token keyword">import</span> msg_send_packer
<span class="token keyword">from</span> cmdInterface <span class="token keyword">import</span> msg_del_packer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="msg-send-packer-pack" tabindex="-1"><a class="header-anchor" href="#msg-send-packer-pack" aria-hidden="true">#</a> <strong>msg_send_packer.pack()</strong></h3><p>消息发送打包器打包方法</p>`,8),m={class:"code-space"},f=e("p",{class:"code-header"},[e("code",{class:"Python code"},"def pack(self, event: dict, cqEncodeMsgs: List[Union[str, dict]], isPureText: bool=False) -> dict")],-1),k=[f],v=r('<ul><li><strong>event</strong>：事件对象</li><li><strong>cqEncodeMsgs</strong>：经过 Encoder 编码的信息的列表（格式可以是 CQ 字符串或字典）</li><li><strong>isPureText</strong>：是否是纯文本。如果为 False，则告诉 go-cqhttp 不解析结果中的 CQ 字符串，因此一般不建议设置为 True</li><li>return：行为 package</li></ul><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>cqEncodeMsgs 列表中各条编码信息一定要采用相同的格式，比如都是 CQ 字符串或者都是字典，否则将导致程序异常</p></div><h3 id="msg-del-packer-pack" tabindex="-1"><a class="header-anchor" href="#msg-del-packer-pack" aria-hidden="true">#</a> <strong>msg_del_packer.pack()</strong></h3><p>消息撤回打包器打包方法</p>',4),b={class:"code-space"},q=e("p",{class:"code-header"},[e("code",{class:"Python code"},"def pack(self, msgId: int) -> dict")],-1),y=[q],x=r(`<ul><li><strong>msgId</strong>：消息 id，存在于事件对象的 <code>message_id</code> 键</li><li>return：行为 package</li></ul><h2 id="encoder" tabindex="-1"><a class="header-anchor" href="#encoder" aria-hidden="true">#</a> Encoder</h2><p>先导入其实例对象：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> utils<span class="token punctuation">.</span>actInterface <span class="token keyword">import</span> Encoder
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="encoder-text" tabindex="-1"><a class="header-anchor" href="#encoder-text" aria-hidden="true">#</a> <strong>Encoder.text()</strong></h3><p>文本消息编码方法</p>`,6),E={class:"code-space"},P=e("p",{class:"code-header"},[e("code",{class:"Python code"},'def text(self, text: str, fromEvent: bool=True, mode: Literal["str", "dict"]="str") -> Union[str, dict]')],-1),I=[P],L=r('<ul><li><strong>text</strong>：文本字符串</li><li><strong>fromEvent</strong>：文本内容是否来自于事件内部。如果是来自事件中的，则不需要转义，因为 go-cqhttp 传给 bot 时已经转义。但如果不是来自事件的，最好转义。</li><li><strong>mode</strong>：编码的模式是字符串还是字典</li><li>return：编码结果</li></ul><h3 id="encoder-face" tabindex="-1"><a class="header-anchor" href="#encoder-face" aria-hidden="true">#</a> <strong>Encoder.face()</strong></h3><p>qq 表情消息编码方法</p>',3),N={class:"code-space"},w=e("p",{class:"code-header"},[e("code",{class:"Python code"},'def face(self, icon_id: int, mode: Literal["str", "dict"]="str") -> Union[str, dict]')],-1),T=[w],U=e("strong",null,"icon_id",-1),B=["href"],A=e("li",null,[e("strong",null,"mode"),i("：编码的模式是字符串还是字典")],-1),C=e("li",null,"return：编码结果",-1),D=e("h3",{id:"encoder-record",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#encoder-record","aria-hidden":"true"},"#"),i(),e("strong",null,"Encoder.record()")],-1),Q=e("p",null,"语音消息编码方法",-1),F={class:"code-space"},M=e("p",{class:"code-header"},[e("code",{class:"Python code"},'def record(self, url: str, timeout: int=None, magic: bool=False, mode: Literal["str", "dict"]="str") -> Union[str, dict]')],-1),V=[M],R=r('<ul><li><strong>url</strong>：语音文件的 url</li><li><strong>timeout</strong>：当语音文件是网络资源时的下载超时时间</li><li><strong>magic</strong>：是否启用变声效果</li><li><strong>mode</strong>：编码的模式是字符串还是字典</li><li>return：编码结果</li></ul><h3 id="encoder-at" tabindex="-1"><a class="header-anchor" href="#encoder-at" aria-hidden="true">#</a> <strong>Encoder.at()</strong></h3><p>at 消息编码方法</p>',3),G={class:"code-space"},S=e("p",{class:"code-header"},[e("code",{class:"Python code"},`def at(self, qq:Union[int, Literal['all']], notInName: str=None, mode: Literal["str", "dict"]="str") -> Union[str, dict]`)],-1),Z=[S],$=r('<ul><li><strong>qq</strong>：被 at 人的 qq 号，群内 at 所有人传入 &quot;all&quot;</li><li><strong>notInName</strong>：在群中找不到 at 的 qq 号时，at 消息显示的名称（若确定 at 的人在群中，请勿使用）</li><li><strong>mode</strong>：编码的模式是字符串还是字典</li><li>return：编码结果</li></ul><h3 id="encoder-share" tabindex="-1"><a class="header-anchor" href="#encoder-share" aria-hidden="true">#</a> <strong>Encoder.share()</strong></h3><p>链接分享卡片消息编码方法</p>',3),j={class:"code-space"},z=e("p",{class:"code-header"},[e("code",{class:"Python code"},'def share(self, url: str, title: str, content: str=None, image: str=None, mode: Literal["str", "dict"]="str") -> Union[str, dict]')],-1),H=[z],J=r('<ul><li><strong>url</strong>：链接地址</li><li><strong>title</strong>：卡片标题</li><li><strong>content</strong>：卡片描述语</li><li><strong>image</strong>：卡片图片</li><li><strong>mode</strong>：编码的模式是字符串还是字典</li><li>return：编码结果</li></ul><h3 id="encoder-music" tabindex="-1"><a class="header-anchor" href="#encoder-music" aria-hidden="true">#</a> <strong>Encoder.music()</strong></h3><p>音乐分享卡片消息编码方法（专有平台的音乐）</p>',3),K={class:"code-space"},O=e("p",{class:"code-header"},[e("code",{class:"Python code"},'def music(self, platType: Literal["qq", "163", "xm"], songId: str, mode: Literal["str", "dict"]="str") -> Union[str, dict]')],-1),W=[O],X=r('<ul><li><strong>platType</strong>：平台类型，字面量，可选 &quot;qq&quot;, &quot;163&quot;, &quot;xm&quot;</li><li><strong>songId</strong>：歌曲 id</li><li><strong>mode</strong>：编码的模式是字符串还是字典</li><li>return：编码结果</li></ul><h3 id="encoder-custom-music" tabindex="-1"><a class="header-anchor" href="#encoder-custom-music" aria-hidden="true">#</a> <strong>Encoder.custom_music()</strong></h3><p>自定义音乐分享卡片消息编码方法</p>',3),Y={class:"code-space"},ee=e("p",{class:"code-header"},[e("code",{class:"Python code"},'def custom_music(self, url: str, audio: str, title: str, content: str=None, image: str=None, mode: Literal["str", "dict"]="str") -> Union[str, dict]')],-1),se=[ee],te=r('<ul><li><strong>url</strong>：自定义音乐平台的主页或网站起始页</li><li><strong>audio</strong>：歌曲链接</li><li><strong>title</strong>：卡片标题</li><li><strong>content</strong>：卡片描述语</li><li><strong>image</strong>：卡片图片</li><li><strong>mode</strong>：编码的模式是字符串还是字典</li><li>return：编码结果</li></ul><h3 id="encoder-image" tabindex="-1"><a class="header-anchor" href="#encoder-image" aria-hidden="true">#</a> <strong>Encoder.image()</strong></h3><p>图片消息编码方法</p>',3),oe={class:"code-space"},ne=e("p",{class:"code-header"},[e("code",{class:"Python code"},'def image(self, file: str, picType: Literal["flash", "show"]=None, subType: Literal[0, 1]=None, cache: Literal[0, 1]=1, mode: Literal["str", "dict"]="str")')],-1),re=[ne],ie=r('<ul><li><strong>file</strong>：图片 url</li><li><strong>picType</strong>：图片类型，字面量，&quot;flash&quot; 为闪照，&quot;show&quot; 为秀图，不填为普通图片</li><li><strong>subType</strong>：图片子类型，只在群聊生效。0 为正常图片，1 为表情包形式</li><li><strong>cache</strong>：当图片资源来自网络时，是否启用缓存，默认不启用</li><li><strong>mode</strong>：编码的模式是字符串还是字典</li><li>return：编码结果</li></ul><h3 id="encoder-reply" tabindex="-1"><a class="header-anchor" href="#encoder-reply" aria-hidden="true">#</a> <strong>Encoder.reply()</strong></h3><p>回复消息编码方法</p>',3),de={class:"code-space"},ce=e("p",{class:"code-header"},[e("code",{class:"Python code"},'def reply(self, messageId: int, mode: Literal["str", "dict"]="str") -> Union[str, dict]')],-1),ae=[ce],le=r('<ul><li><strong>messageId</strong>：消息 id，应该存在于事件对象的 <code>messaage_id</code> 键</li><li><strong>mode</strong>：编码的模式是字符串还是字典</li><li>return：编码结果</li></ul><h3 id="encoder-poke" tabindex="-1"><a class="header-anchor" href="#encoder-poke" aria-hidden="true">#</a> <strong>Encoder.poke()</strong></h3><p>戳一戳消息编码方法</p>',3),he={class:"code-space"},pe=e("p",{class:"code-header"},[e("code",{class:"Python code"},'def poke(self, qqId: int, mode: Literal["str", "dict"]="str") -> Union[str, dict]')],-1),ge=[pe],ue=r('<ul><li><strong>qqId</strong>：被戳人的 qq 号，应该存在于事件对象的 <code>user_id</code> 键</li><li><strong>mode</strong>：编码的模式是字符串还是字典</li><li>return：编码结果</li></ul><h3 id="encoder-tts" tabindex="-1"><a class="header-anchor" href="#encoder-tts" aria-hidden="true">#</a> <strong>Encoder.tts()</strong></h3><p>腾讯自带 tts 语音消息消息编码方法</p>',3),_e={class:"code-space"},me=e("p",{class:"code-header"},[e("code",{class:"Python code"},'def tts(self, text: str, mode: Literal["str", "dict"]="str") -> Union[str, dict]')],-1),fe=[me],ke=e("ul",null,[e("li",null,[e("strong",null,"text"),i("：需要被转为语音消息的文本")]),e("li",null,[e("strong",null,"mode"),i("：编码的模式是字符串还是字典")]),e("li",null,"return：编码结果")],-1);function ve(d,be){const o=a("highlight");return s(),t("div",null,[h,n((s(),t("div",p,u)),[[o]]),_,n((s(),t("div",m,k)),[[o]]),v,n((s(),t("div",b,y)),[[o]]),x,n((s(),t("div",E,I)),[[o]]),L,n((s(),t("div",N,T)),[[o]]),e("ul",null,[e("li",null,[U,i("：qq 表情 id，请参考外链："),e("a",{href:d.$withBase("https://github.com/kyubotics/coolq-http-api/wiki/%E8%A1%A8%E6%83%85-CQ-%E7%A0%81-ID-%E8%A1%A8")},"表情 CQ 码 ID 表",8,B)]),A,C]),D,Q,n((s(),t("div",F,V)),[[o]]),R,n((s(),t("div",G,Z)),[[o]]),$,n((s(),t("div",j,H)),[[o]]),J,n((s(),t("div",K,W)),[[o]]),X,n((s(),t("div",Y,se)),[[o]]),te,n((s(),t("div",oe,re)),[[o]]),ie,n((s(),t("div",de,ae)),[[o]]),le,n((s(),t("div",he,ge)),[[o]]),ue,n((s(),t("div",_e,fe)),[[o]]),ke])}const ye=c(l,[["render",ve],["__file","action.html.vue"]]);export{ye as default};
