import{_ as s,p as n,q as c,R as e,t as o,a1 as a}from"./framework-1bc831b6.js";const i={},d=a(`<h1 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h1><h2 id="go-cqhttp-的前置配置" tabindex="-1"><a class="header-anchor" href="#go-cqhttp-的前置配置" aria-hidden="true">#</a> go-cqhttp 的前置配置</h2><p>MeloBot 依赖于 go-cqhttp 作为前端接口。因此，你必须正确配置 go-cqhttp，才能使其与 MeloBot 协同工作。（推荐 go-cqhttp 版本 &gt;= <code>v1.0.0</code> ）</p><p>目前 MeloBot 对 go-cqhttp 的配置有以下特殊要求：</p><ul><li>连接类型需是正向 websockets</li><li>连接不开启密码加密</li><li>上报类型 post-format 应该为 array</li></ul><p>在确认这些配置无误后，先运行一遍项目根目录的 <code>main.py</code>，然后程序会提示“未检测到配置文件，已自动生成，请填写配置后重启 bot”。</p><p>然后找到位于 <code>./config/botConfig.toml</code> 的 bot 配置文件，对应设置好其中 <code>CONNECT_HOST</code> 和 <code>CONNECT_PORT</code> 两个配置项。例如：</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token key property">CONNECT_HOST</span> <span class="token punctuation">=</span> <span class="token string">&quot;localhost&quot;</span>
<span class="token key property">CONNECT_PORT</span> <span class="token punctuation">=</span> <span class="token number">8080</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>go-cqhttp 的其他配置，不在本文档的叙述范围内，请自行参考其文档。</p></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>websockets 是效率较高的全双工通信。因此当前版本 MeloBot 只支持这一通信方式。未来可能考虑支持 go-cqhttp 提供的 http 通信和反向 websockets。</p></div><h2 id="bot-的配置和启动" tabindex="-1"><a class="header-anchor" href="#bot-的配置和启动" aria-hidden="true">#</a> bot 的配置和启动</h2><p>依然是打开上面的 bot 配置文件。修改 <code>OWNER</code> 配置为你自己的 qq 号，然后把想要 bot 做出响应的 qq 群号加入到 <code>WHITE_GROUP_LIST</code> 列表中。</p><p>配置完成后，进行依赖模块的安装，在项目根目录下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip3 <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成后，再次运行 <code>main.py</code> 即可。当日志提示“与 cq 成功建立 websocket 连接”即代表已经成功建立通信，并开始正常工作。</p>`,15),l={class:"custom-container tip"},r=e("p",{class:"custom-container-title"},"TIP",-1),p=["href"],h=a(`<h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p>在白名单群聊或者与 bot 的好友聊天中输入：<code>$echo#Hello, Wrold!</code>，此时 bot 应该回复：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hello World!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入 <code>$help</code> 可以查看现在可用的所有命令。使用 <code>$help#&lt;命令名&gt;</code> 可查看每个命令的功能、用法。</p><h2 id="更多" tabindex="-1"><a class="header-anchor" href="#更多" aria-hidden="true">#</a> 更多</h2><p>想要实现更多自定义的功能，建议阅读：</p>`,6),u=["href"],b=["href"],m=["href"],g=e("br",null,null,-1),_=["href"];function f(t,v){return n(),c("div",null,[d,e("div",l,[r,e("p",null,[o("更多 bot 配置项请参考："),e("a",{href:t.$withBase("/config/botConfig")},"MeloBot 配置 - bot 配置",8,p)])]),h,e("p",null,[e("a",{href:t.$withBase("/guide/mechanism")},"MeloBot 简介 - 机制简述",8,u)]),e("p",null,[e("a",{href:t.$withBase("/config/keyAnsConfig")},"MeloBot 配置 - 关键词应答配置",8,b)]),e("p",null,[e("a",{href:t.$withBase("/api/cmd.html")},"MeloBot API",8,m)]),g,o(" 下一篇： "),e("a",{href:t.$withBase("/config/botConfig")},"MeloBot 配置 - bot 配置",8,_)])}const k=s(i,[["render",f],["__file","index.html.vue"]]);export{k as default};
