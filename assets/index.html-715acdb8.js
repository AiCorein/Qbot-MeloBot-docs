import{_ as s,p as a,q as e,t,R as o,a1 as p}from"./framework-1bc831b6.js";const c={},i=p(`<h1 id="关键词应答配置" tabindex="-1"><a class="header-anchor" href="#关键词应答配置" aria-hidden="true">#</a> 关键词应答配置</h1><p>关键词应答配置文件为项目根目录下的 <code>./corpus/key_ans.json</code> 文件。配置文件使用 json 格式，因此在修改前，你应该对 json 格式有所了解。</p><p>下面对配置项进行说明。</p><h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h2><p>配置文件中，每个规则为一个对象，盛装在最外层的对象数组中。每个规则对象的格式为：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;keys&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>...<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;prob&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;ans&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>...<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>keys</code> 为字符串数组，指明了哪些关键词可以触发这条规则</li><li><code>prob</code> 为数值，象征触发这条规则的概率</li><li><code>ans</code> 为应答对象数组</li></ul><p>而每一个应答对象又是以下格式：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;sentence&quot;</span><span class="token operator">:</span> <span class="token string">&quot;好耶...&quot;</span><span class="token punctuation">,</span> 
    <span class="token property">&quot;ending-repeat&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;total-repeat&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>sentence</code> 为字符串，是回复的内容</li><li><code>ending-repeat</code> 为数值型数组，如设置为 <code>[0, 6]</code>，即代表回复时随机将<strong>应答内容尾字符</strong>重复 0-6 次。</li><li><code>total-repeat</code> 为数值型数组，如设置为 <code>[0, 3]</code>，即代表回复时随机将<strong>整个应答内容</strong>重复 0-3 次。</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>ending-repeat</code> 和 <code>total-repeat</code> 是可选的键。</p><p>提供这两个键，是为了方便某些重复搞怪的回复，如“哈哈哈”、“好耶好耶好耶”、“hhhhhc”。</p></div><br>`,12),l=["href"];function r(n,u){return a(),e("div",null,[i,t(" 下一篇："),o("a",{href:n.$withBase("/advanced")},"MeloBot 进阶",8,l)])}const k=s(c,[["render",r],["__file","index.html.vue"]]);export{k as default};
